// Package libraries implements the Azure ARM Libraries service API version 0.1.0.
//
// Databricks REST API
package libraries

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/validation"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service Libraries
DefaultBaseURI = "/api/2.0")

// BaseClient is the base client for Libraries.
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // AllClusterStatuses sends the all cluster statuses request.
    func (client BaseClient) AllClusterStatuses(ctx context.Context) (result AllClusterStatusesResult, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.AllClusterStatuses")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.AllClusterStatusesPreparer(ctx)
        if err != nil {
        err = autorest.NewErrorWithError(err, "libraries.BaseClient", "AllClusterStatuses", nil , "Failure preparing request")
        return
        }

                resp, err := client.AllClusterStatusesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "AllClusterStatuses", resp, "Failure sending request")
                return
                }

                result, err = client.AllClusterStatusesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "AllClusterStatuses", resp, "Failure responding to request")
                }

        return
        }

        // AllClusterStatusesPreparer prepares the AllClusterStatuses request.
        func (client BaseClient) AllClusterStatusesPreparer(ctx context.Context) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/libraries/all-cluster-statuses"))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AllClusterStatusesSender sends the AllClusterStatuses request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AllClusterStatusesSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AllClusterStatusesResponder handles the response to the AllClusterStatuses request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AllClusterStatusesResponder(resp *http.Response) (result AllClusterStatusesResult, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // ClusterStatus sends the cluster status request.
    func (client BaseClient) ClusterStatus(ctx context.Context, body ClusterStatusAttributes) (result ClusterStatusResult, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.ClusterStatus")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.ClusterID", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("libraries.BaseClient", "ClusterStatus", err.Error())
                }

                    req, err := client.ClusterStatusPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "libraries.BaseClient", "ClusterStatus", nil , "Failure preparing request")
        return
        }

                resp, err := client.ClusterStatusSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "ClusterStatus", resp, "Failure sending request")
                return
                }

                result, err = client.ClusterStatusResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "ClusterStatus", resp, "Failure responding to request")
                }

        return
        }

        // ClusterStatusPreparer prepares the ClusterStatus request.
        func (client BaseClient) ClusterStatusPreparer(ctx context.Context, body ClusterStatusAttributes) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/libraries/cluster-status"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // ClusterStatusSender sends the ClusterStatus request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) ClusterStatusSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ClusterStatusResponder handles the response to the ClusterStatus request. The method always
    // closes the http.Response Body.
    func (client BaseClient) ClusterStatusResponder(resp *http.Response) (result ClusterStatusResult, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // Install sends the install request.
    func (client BaseClient) Install(ctx context.Context, body InstallAttributes) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.Install")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.ClusterID", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.LibrariesProperty", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("libraries.BaseClient", "Install", err.Error())
                }

                    req, err := client.InstallPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "libraries.BaseClient", "Install", nil , "Failure preparing request")
        return
        }

                resp, err := client.InstallSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "Install", resp, "Failure sending request")
                return
                }

                result, err = client.InstallResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "Install", resp, "Failure responding to request")
                }

        return
        }

        // InstallPreparer prepares the Install request.
        func (client BaseClient) InstallPreparer(ctx context.Context, body InstallAttributes) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/libraries/install"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // InstallSender sends the Install request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) InstallSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // InstallResponder handles the response to the Install request. The method always
    // closes the http.Response Body.
    func (client BaseClient) InstallResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

    // Uninstall sends the uninstall request.
    func (client BaseClient) Uninstall(ctx context.Context, body InstallAttributes) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.Uninstall")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.ClusterID", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.LibrariesProperty", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("libraries.BaseClient", "Uninstall", err.Error())
                }

                    req, err := client.UninstallPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "libraries.BaseClient", "Uninstall", nil , "Failure preparing request")
        return
        }

                resp, err := client.UninstallSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "Uninstall", resp, "Failure sending request")
                return
                }

                result, err = client.UninstallResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "libraries.BaseClient", "Uninstall", resp, "Failure responding to request")
                }

        return
        }

        // UninstallPreparer prepares the Uninstall request.
        func (client BaseClient) UninstallPreparer(ctx context.Context, body InstallAttributes) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/libraries/uninstall"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UninstallSender sends the Uninstall request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UninstallSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // UninstallResponder handles the response to the Uninstall request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UninstallResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

