// Package secrets implements the Azure ARM Secrets service API version 0.1.0.
//
// Databricks REST API
package secrets

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/validation"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service Secrets
DefaultBaseURI = "/api/2.0")

// BaseClient is the base client for Secrets.
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // AclsDelete sends the acls delete request.
    func (client BaseClient) AclsDelete(ctx context.Context, body AclsRequest) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.AclsDelete")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.Principal", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "AclsDelete", err.Error())
                }

                    req, err := client.AclsDeletePreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsDelete", nil , "Failure preparing request")
        return
        }

                resp, err := client.AclsDeleteSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsDelete", resp, "Failure sending request")
                return
                }

                result, err = client.AclsDeleteResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsDelete", resp, "Failure responding to request")
                }

        return
        }

        // AclsDeletePreparer prepares the AclsDelete request.
        func (client BaseClient) AclsDeletePreparer(ctx context.Context, body AclsRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/acls/delete"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AclsDeleteSender sends the AclsDelete request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AclsDeleteSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AclsDeleteResponder handles the response to the AclsDelete request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AclsDeleteResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

    // AclsGet sends the acls get request.
    func (client BaseClient) AclsGet(ctx context.Context, body AclsRequest) (result AclsResult, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.AclsGet")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.Principal", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "AclsGet", err.Error())
                }

                    req, err := client.AclsGetPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsGet", nil , "Failure preparing request")
        return
        }

                resp, err := client.AclsGetSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsGet", resp, "Failure sending request")
                return
                }

                result, err = client.AclsGetResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsGet", resp, "Failure responding to request")
                }

        return
        }

        // AclsGetPreparer prepares the AclsGet request.
        func (client BaseClient) AclsGetPreparer(ctx context.Context, body AclsRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/acls/get"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AclsGetSender sends the AclsGet request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AclsGetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AclsGetResponder handles the response to the AclsGet request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AclsGetResponder(resp *http.Response) (result AclsResult, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // AclsList sends the acls list request.
    func (client BaseClient) AclsList(ctx context.Context, body ListSecretsAclsRequest) (result ListSecretsAclsResult, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.AclsList")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.AclsListPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsList", nil , "Failure preparing request")
        return
        }

                resp, err := client.AclsListSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsList", resp, "Failure sending request")
                return
                }

                result, err = client.AclsListResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsList", resp, "Failure responding to request")
                }

        return
        }

        // AclsListPreparer prepares the AclsList request.
        func (client BaseClient) AclsListPreparer(ctx context.Context, body ListSecretsAclsRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/acls/list"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AclsListSender sends the AclsList request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AclsListSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AclsListResponder handles the response to the AclsList request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AclsListResponder(resp *http.Response) (result ListSecretsAclsResult, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // AclsPut sends the acls put request.
    func (client BaseClient) AclsPut(ctx context.Context, body PutSecretACLRequest) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.AclsPut")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.Principal", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "AclsPut", err.Error())
                }

                    req, err := client.AclsPutPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsPut", nil , "Failure preparing request")
        return
        }

                resp, err := client.AclsPutSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsPut", resp, "Failure sending request")
                return
                }

                result, err = client.AclsPutResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "AclsPut", resp, "Failure responding to request")
                }

        return
        }

        // AclsPutPreparer prepares the AclsPut request.
        func (client BaseClient) AclsPutPreparer(ctx context.Context, body PutSecretACLRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/acls/put"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AclsPutSender sends the AclsPut request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AclsPutSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AclsPutResponder handles the response to the AclsPut request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AclsPutResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

    // CreateScope sends the create scope request.
    func (client BaseClient) CreateScope(ctx context.Context, body CreateScopeRequest) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.CreateScope")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "CreateScope", err.Error())
                }

                    req, err := client.CreateScopePreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "CreateScope", nil , "Failure preparing request")
        return
        }

                resp, err := client.CreateScopeSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "CreateScope", resp, "Failure sending request")
                return
                }

                result, err = client.CreateScopeResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "CreateScope", resp, "Failure responding to request")
                }

        return
        }

        // CreateScopePreparer prepares the CreateScope request.
        func (client BaseClient) CreateScopePreparer(ctx context.Context, body CreateScopeRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/scopes/create"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateScopeSender sends the CreateScope request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateScopeSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CreateScopeResponder handles the response to the CreateScope request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateScopeResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

    // Delete sends the delete request.
    func (client BaseClient) Delete(ctx context.Context, body Request) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.Delete")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.Key", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "Delete", err.Error())
                }

                    req, err := client.DeletePreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "Delete", nil , "Failure preparing request")
        return
        }

                resp, err := client.DeleteSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "Delete", resp, "Failure sending request")
                return
                }

                result, err = client.DeleteResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "Delete", resp, "Failure responding to request")
                }

        return
        }

        // DeletePreparer prepares the Delete request.
        func (client BaseClient) DeletePreparer(ctx context.Context, body Request) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/delete"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // DeleteSender sends the Delete request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) DeleteSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client BaseClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

    // DeleteScope sends the delete scope request.
    func (client BaseClient) DeleteScope(ctx context.Context, body DeleteScopeRequest) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.DeleteScope")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "DeleteScope", err.Error())
                }

                    req, err := client.DeleteScopePreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "DeleteScope", nil , "Failure preparing request")
        return
        }

                resp, err := client.DeleteScopeSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "DeleteScope", resp, "Failure sending request")
                return
                }

                result, err = client.DeleteScopeResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "DeleteScope", resp, "Failure responding to request")
                }

        return
        }

        // DeleteScopePreparer prepares the DeleteScope request.
        func (client BaseClient) DeleteScopePreparer(ctx context.Context, body DeleteScopeRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/scopes/delete"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // DeleteScopeSender sends the DeleteScope request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) DeleteScopeSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteScopeResponder handles the response to the DeleteScope request. The method always
    // closes the http.Response Body.
    func (client BaseClient) DeleteScopeResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

    // List sends the list request.
    func (client BaseClient) List(ctx context.Context, body ListSecretsRequest) (result ListResult, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.List")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "List", err.Error())
                }

                    req, err := client.ListPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "List", nil , "Failure preparing request")
        return
        }

                resp, err := client.ListSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "List", resp, "Failure sending request")
                return
                }

                result, err = client.ListResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "List", resp, "Failure responding to request")
                }

        return
        }

        // ListPreparer prepares the List request.
        func (client BaseClient) ListPreparer(ctx context.Context, body ListSecretsRequest) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/list"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // ListSender sends the List request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) ListSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client BaseClient) ListResponder(resp *http.Response) (result ListResult, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // ListScopes sends the list scopes request.
    func (client BaseClient) ListScopes(ctx context.Context) (result ListScopesResult, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.ListScopes")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.ListScopesPreparer(ctx)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "ListScopes", nil , "Failure preparing request")
        return
        }

                resp, err := client.ListScopesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "ListScopes", resp, "Failure sending request")
                return
                }

                result, err = client.ListScopesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "ListScopes", resp, "Failure responding to request")
                }

        return
        }

        // ListScopesPreparer prepares the ListScopes request.
        func (client BaseClient) ListScopesPreparer(ctx context.Context) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/scopes/list"))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // ListScopesSender sends the ListScopes request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) ListScopesSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListScopesResponder handles the response to the ListScopes request. The method always
    // closes the http.Response Body.
    func (client BaseClient) ListScopesResponder(resp *http.Response) (result ListScopesResult, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // Put sends the put request.
    func (client BaseClient) Put(ctx context.Context, body Request) (result autorest.Response, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.Put")
            defer func() {
                sc := -1
                if result.Response != nil {
                    sc = result.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: body,
                 Constraints: []validation.Constraint{	{Target: "body.Scope", Name: validation.Null, Rule: true, Chain: nil },
                	{Target: "body.Key", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("secrets.BaseClient", "Put", err.Error())
                }

                    req, err := client.PutPreparer(ctx, body)
        if err != nil {
        err = autorest.NewErrorWithError(err, "secrets.BaseClient", "Put", nil , "Failure preparing request")
        return
        }

                resp, err := client.PutSender(req)
                if err != nil {
                result.Response = resp
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "Put", resp, "Failure sending request")
                return
                }

                result, err = client.PutResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "secrets.BaseClient", "Put", resp, "Failure responding to request")
                }

        return
        }

        // PutPreparer prepares the Put request.
        func (client BaseClient) PutPreparer(ctx context.Context, body Request) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/secrets/put"),
        autorest.WithJSON(body))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // PutSender sends the Put request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) PutSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // PutResponder handles the response to the Put request. The method always
    // closes the http.Response Body.
    func (client BaseClient) PutResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByClosing())
        result.Response = resp
            return
        }

